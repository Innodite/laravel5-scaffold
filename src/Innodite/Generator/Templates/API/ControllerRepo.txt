<?php namespace $NAMESPACE$;

use App\Http\Requests;
use Innodite\Controller\AppBaseController;
use Innodite\Generator\Utils\ResponseManager;
use $MODEL_NAMESPACE$;
use Illuminate\Http\Request;
use $REPO_NAMESPACE$\$MODEL_NAME$Repository;
use Response;
use Schema;

class $MODEL_NAME$APIController extends AppBaseController
{

	/** @var  $MODEL_NAME$Repository */
	private $$MODEL_NAME_CAMEL$Repository;

	function __construct($MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repo)
	{
		$this->$MODEL_NAME_CAMEL$Repository = $$MODEL_NAME_CAMEL$Repo;
	}

	/**
	 * Display a listing of the $MODEL_NAME$.
	 *
	 * @param Request $request
	 *
	 * @return Response
	 */
	public function index(Request $request)
	{
	    $input = $request->all();

		$result = $this->$MODEL_NAME_CAMEL$Repository->search($input);

		$$MODEL_NAME_PLURAL_CAMEL$ = $result[0];

		return Response::json(ResponseManager::makeResult($$MODEL_NAME_PLURAL_CAMEL$->toArray(), "$MODEL_NAME_PLURAL$ retrieved successfully."));
	}

	public function search($input)
    {
        $query = $MODEL_NAME$::query();

        $columns = Schema::getColumnListing('$TABLE_NAME$');
        $attributes = array();

        foreach($columns as $attribute)
        {
            if(isset($input[$attribute]))
            {
                $query->where($attribute, $input[$attribute]);
            }
        }

        return $query->get();
    }

	/**
	 * Show the form for creating a new $MODEL_NAME$.
	 *
	 * @return Response
	 */
	public function create()
	{
		//
	}

	/**
	 * Store a newly created $MODEL_NAME$ in storage.
	 *
	 * @param Request $request
	 *
	 * @return Response
	 */
	public function store(Request $request)
	{
		if(sizeof($MODEL_NAME$::$rules) > 0)
            $this->validateRequest($request, $MODEL_NAME$::$rules);

        $input = $request->all();

		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->store($input);

		return Response::json(ResponseManager::makeResult($$MODEL_NAME_CAMEL$->toArray(), "$MODEL_NAME$ saved successfully."));
	}

	/**
	 * Display the specified $MODEL_NAME$.
	 *
	 * @param  int $id
	 *
	 * @return Response
	 */
	public function show($id)
	{
		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find$MODEL_NAME$ById($id);

		if(empty($$MODEL_NAME_CAMEL$))
			$this->throwRecordNotFoundException("$MODEL_NAME$ not found", ERROR_CODE_RECORD_NOT_FOUND);

		return Response::json(ResponseManager::makeResult($$MODEL_NAME_CAMEL$->toArray(), "$MODEL_NAME$ retrieved successfully."));
	}

	/**
	 * Show the form for editing the specified $MODEL_NAME$.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function edit($id)
	{
		//
	}

	/**
	 * Update the specified $MODEL_NAME$ in storage.
	 *
	 * @param  int    $id
	 * @param Request $request
	 *
	 * @return Response
	 */
	public function update($id, Request $request)
	{
		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find$MODEL_NAME$ById($id);

		if(empty($$MODEL_NAME_CAMEL$))
			$this->throwRecordNotFoundException("$MODEL_NAME$ not found", ERROR_CODE_RECORD_NOT_FOUND);

		$input = $request->all();

		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->update($$MODEL_NAME_CAMEL$, $input);

		return Response::json(ResponseManager::makeResult($$MODEL_NAME_CAMEL$->toArray(), "$MODEL_NAME$ updated successfully."));
	}

	/**
	 * Remove the specified $MODEL_NAME$ from storage.
	 *
	 * @param  int $id
	 *
	 * @return Response
	 */
	public function destroy($id)
	{
		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find$MODEL_NAME$ById($id);

		if(empty($$MODEL_NAME_CAMEL$))
			$this->throwRecordNotFoundException("$MODEL_NAME$ not found", ERROR_CODE_RECORD_NOT_FOUND);

		$$MODEL_NAME_CAMEL$->delete();

		return Response::json(ResponseManager::makeResult($id, "$MODEL_NAME$ deleted successfully."));
	}
}
